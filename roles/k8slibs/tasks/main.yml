- name: 下载证书工具
  shell: |
    cd /tmp/
    wget http://47.105.80.198:8080/cfssl.tar.gz
    tar -zxvf cfssl.tar.gz
    cd cfssl
    mv cfssl* /usr/bin/
    chmod +x /usr/bin/cfssl*

- name: 创建工作目录
  file:
    path: /usr/local/ssl
    state: directory
    recurse: yes

- name: 创建cert配置文件
  copy:
    src:  "{{ item }}"
    dest: /usr/local/ssl
  with_items:
    - admin-csr.json
    - ca-config.json
    - ca-csr.json
    - kube-controller-manager-csr.json
    - kube-scheduler-csr.json
    - kubernetes-csr.json
    - service-account-csr.json

- name: 创建证书
  shell: |
    cd /usr/local/ssl
    cfssl gencert -initca ca-csr.json | cfssljson -bare ca
    cfssl gencert -ca=./ca.pem -ca-key=./ca-key.pem -config=./ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=10.1.0.1,{{ masterhost }},127.0.0.1,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster.kubernetes.default.svc.cluster.local -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes service-account-csr.json | cfssljson -bare service-account

- name: 安装kubectl
  shell: |
    cd /tmp/
    wget http://47.105.80.198:8080/kubernetes/kubectl
    mv kubectl /usr/bin/kubectl
    chmod +x /usr/bin/kubectl

- name: 创建kubeconfig目录
  file:
    path: /usr/local/kubefiles
    state: directory
    recurse: yes

- name: 生成kubeproxy
  shell: |
    cd /usr/local/kubefiles
    kubectl config set-cluster kubernetes --certificate-authority=../ssl/ca.pem --embed-certs=true --server=https://{{ kubeapi }} --kubeconfig=kube-proxy.kubeconfig
    kubectl config set-credentials system:kube-proxy --client-certificate=../ssl/kube-proxy.pem --client-key=../ssl/kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig
    kubectl config set-context default --cluster=kubernetes --user=system:kube-proxy --kubeconfig=kube-proxy.kubeconfig
    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig

- name: 生成kube-controller-manager
  shell: |
    cd /usr/local/kubefiles
    kubectl config set-cluster kubernetes --certificate-authority=../ssl/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=kube-controller-manager.kubeconfig
    kubectl config set-credentials system:kube-controller-manager --client-certificate=../ssl/kube-controller-manager.pem --client-key=../ssl/kube-controller-manager-key.pem --embed-certs=true --kubeconfig=kube-controller-manager.kubeconfig
    kubectl config set-context default --cluster=kubernetes --user=system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig
    kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig

- name: 生成scheduler
  shell: |
    cd /usr/local/kubefiles
    kubectl config set-cluster kubernetes --certificate-authority=../ssl/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=kube-scheduler.kubeconfig
    kubectl config set-credentials system:kube-scheduler --client-certificate=../ssl/kube-scheduler.pem --client-key=../ssl/kube-scheduler-key.pem --embed-certs=true --kubeconfig=kube-scheduler.kubeconfig
    kubectl config set-context default --cluster=kubernetes --user=system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig
    kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig

- name: 生成adimconfig
  shell: |
    cd /usr/local/kubefiles
    kubectl config set-cluster kubernetes --certificate-authority=../ssl/ca.pem --embed-certs=true --server=https://{{ kubeapi }} --kubeconfig=admin.kubeconfig
    kubectl config set-credentials admin --client-certificate=../ssl/admin.pem --client-key=../ssl/admin-key.pem --embed-certs=true --kubeconfig=admin.kubeconfig
    kubectl config set-context default --cluster=kubernetes --user=admin --kubeconfig=admin.kubeconfig
    kubectl config use-context default --kubeconfig=admin.kubeconfig

- name: 生成数据加密配置
  template:
    src: encryption-config.yaml
    dest: /usr/local/kubefiles/encryption-config.yaml



